from glob import globimport csvimport argparseimport pdbimport osimport pandas as pddef make_csv(path):    """    Pathological Evaluation of Whole Slide Images        pN0: No micro-metastases or macro-metastases or ITCs found.    pN0(i+): Only ITCs found.    pN1mi: Micro-metastases found, but no macro-metastases found.    pN1: Metastases found in 1–3 lymph nodes, of which at least one is a macro-metastasis.    pN2: Metastases found in 4–9 lymph nodes, of which at least one is a macro-metastasis.        Parameters    ----------    path : str        Path to folder of csv of Whole Slide Images.    Returns    -------    combined_df : pandas.DataFrame        pandas.DataFrame that can be converted to csv.    """            csvs = glob(os.path.join(path,'*.csv'))    csvs = sorted(csvs)    #combine all files in the list    combined_df = pd.concat([pd.read_csv(f) for f in csvs],ignore_index=True)        print("PN - Staging...")    for patient in range(100,200):        patient_data = combined_df[combined_df['patient'].str.match('patient_'+str(patient))]        nodes = patient_data['patient']        tumor = patient_data['stage']                first_node = combined_df.patient.str.match('patient_'+str(patient)).idxmax()        upper = combined_df.iloc[:first_node]        lower = combined_df.iloc[first_node:]                itc   = tumor.str.count('itc').sum()        micro = tumor.str.count('micro').sum()        macro = tumor.str.count('macro').sum()                ### PN - Staging ###        if not (itc or micro or macro):            new = pd.DataFrame([[f'patient_{patient}.zip','pN0']],columns=upper.columns)            combined_df = upper.append(new,ignore_index=True)            combined_df = combined_df.append(lower,ignore_index=True)                    elif itc == 5:            new = pd.DataFrame([[f'patient_{patient}.zip','pN0(i+)']],columns=upper.columns)            combined_df = upper.append(new,ignore_index=True)            combined_df = combined_df.append(lower,ignore_index=True)                    elif micro and not macro:            new = pd.DataFrame([[f'patient_{patient}.zip','pN1mi']],columns=upper.columns)            combined_df = upper.append(new,ignore_index=True)            combined_df = combined_df.append(lower,ignore_index=True)                    elif (micro + macro) >= 1 and (micro + macro) <=3 and macro >= 1:            new = pd.DataFrame([[f'patient_{patient}.zip','pN1']],columns=upper.columns)            combined_df = upper.append(new,ignore_index=True)            combined_df = combined_df.append(lower,ignore_index=True)                    elif (micro + macro) >= 4 and (micro + macro) <=9 and macro >= 1:            new = pd.DataFrame([[f'patient_{patient}.zip','pN2']],columns=upper.columns)            combined_df = upper.append(new,ignore_index=True)            combined_df = combined_df.append(lower,ignore_index=True)            return combined_df        def collect_arguments():    """    Collect command line arguments.    Returns:        (str, str): The parsed reference and submission CSV file paths.    """    # Configure argument parser.    #    argument_parser = argparse.ArgumentParser(description='PN - Stager')    argument_parser.add_argument('-r', '--reference_path',  required=True, type=str, help='reference CSVs path')    argument_parser.add_argument('-s', '--save_file', required=True, type=str, help='save CSV filename')    # Parse arguments.    #    arguments = vars(argument_parser.parse_args())    # Collect arguments.    #    parsed_reference_path = arguments['reference_path']    parsed_submission_path = arguments['save_file']    # Print parsed parameters.        print(argument_parser.description)    print(f'Reference folder: {parsed_reference_path}')    print(f'Submission file: {parsed_submission_path}')    return parsed_reference_path, parsed_submission_path#----------------------------------------------------------------------------------------------------if __name__ == '__main__':    # Parse parameters.    reference_path, submission_path = collect_arguments()    # Load csv paths    scores_df = make_csv(reference_path)    scores_df.to_csv(submission_path,index=False)    print(f"Saved scores to {submission_path}!")        